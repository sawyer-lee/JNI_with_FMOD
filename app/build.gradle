apply plugin: 'com.android.application'

android {
    compileSdk 30

    defaultConfig {
        applicationId "com.sawyer.study_jni_fmod"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // todo 第四步：指定CPU架构   即Cmake中的本地编译库使用哪个平台下的 libfmod.so/libfmodL.so
        externalNativeBuild {
            cmake {
                //cppFlags ''  //表示支持四大CPU架构

                //指定CPU架构为armeabi-v7a
                abiFilters "armeabi-v7a"
            }
        }

        // todo 第五步：指定CPU的架构 决定了生成的apk/lib/包含哪些平台
        // 下面代码不写，代表默认是四大CPU架构平台 即生成的apk里面lib文件夹下有四个CPU架构的平台
        ndk {
            abiFilters("armeabi-v7a")
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }
    buildFeatures {
        viewBinding true
    }
    ndkVersion '21.1.6352462'
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // 引用/app/libs文件夹里面的fmod.jar
    implementation files('libs/fmod.jar')
}